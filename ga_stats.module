<?php
  require_once('inc/ga.inc');
  define('GA_ABBR', 'ga');

/**
 * Implements of hook_menu().
 */
function ga_stats_menu() {
  $items = array();

  $items['admin/config/services/ga_stats'] = array(
    'title' => 'Google Analytics Statistics',
    'description' => 'Configuration for Google Analytics Statistics',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ga_stats_admin_settings'),
    'access arguments' => array('administer site config'),
    'file' => 'ga_stats.admin.inc',
  );

  return $items;
}

/**
 * Implements of hook_views_api()
 */
function ga_stats_views_api() {
  return array(
    'api' => 2,
  );
}

/**
 * Implements of hook_cron().
 */
function ga_stats_cron() {
  if (ga_stats_needs_update()) {
    ga_stats_update_counts();
  }
}

/**
 * Pull data from Google Analytics and prepare for storage.
 *
 * @param array|string $metric
 *   An array or string of the metrics to pull.
 * @param int $start_time
 *   The beginning of the timeframe for which data is pulled.
 * @param int $end_time
 *   The end of the timeframe for which data is pulled.
 * @param $timeframe
 *   A time_frame object.
 *
 * @return array
 *   An array of obj ready for the ga_stats_count table
 */
function ga_stats_get_data($metric, $start_time, $end_time, $timeframe = '') {
  $data_array = ga_stats_ga_data($metric, $start_time, $end_time);
  $metrics = ga_stats_ga_metrics();
  $counts = array();
  foreach ($data_array as $d) {
    $count = new stdClass;
    $count->url = $d['url'];
    $count->count = $d[$metric];
    $count->metric = $metric;
    $count->nid = FALSE;
    $count->timeframe = $timeframe;
    $alias = preg_replace('/^\//', '', $count->url);
    if (!preg_match('/^node\/([0-9]*)/', $alias, $matches) ) {
      $alias = drupal_lookup_path('source', $alias);
    }
    if (preg_match('/^node\/([0-9]*)/', $alias, $matches)  ) {
      $count->nid = $matches[1];
    }

    // only log nodes
    if ($count->nid) {
      $counts[] = $count;
    }
  }
  
  return $counts;
}

/**
 * Determine if a scheduled statistics update is needed.
 *
 * @return bool
 */
function ga_stats_needs_update() {
  $last = variable_get('ga_stats_last_update', NULL);
  if (isset($last) && $last >= $_SERVER['REQUEST_TIME']) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Set the soonest statistics should be auto-updated.
 *
 * @return int
 */
function ga_stats_schedule_update() {
  $timeframe = variable_get('ga_stats_enabled_timeframes', array('today' => TRUE, 'month' => TRUE));

  // Save the data for 10 or 30 minutes (based on whether hourly data is enabled)
  // @todo clarify why this seems arbitrary.
  if (array_key_exists('hour', $timeframe)) {
    $expiration = 60 * 10;
  }
  else {
    $expiration = 60 * 30;
  }
  $expiration += $_SERVER['REQUEST_TIME'];
  variable_set('ga_stats_last_update', $expiration);

  return $expiration;
}

/**
 * Goes through sources and metrics and updates databases
 *
 * Views cannot tell the difference between the various metrics and timeframes
 * so we delete all counts before rebuilding.
 */
function ga_stats_update_counts() {
  $user = variable_get('ga_stats_email', '');
  $password = variable_get('ga_stats_password', '');
  $aid = variable_get('ga_stats_profile', '');

  // Check that credentials are available.
  // @todo Move lower into callstack stack.
  if (!$user || !$password) {
    drupal_set_message(t('Google Analytics email and password not set.'), 'error');
    watchdog('ga_stats', 'Google Analytics API credentials not set.', WATCHDOG_WARNING);
    return FALSE;
  }

  $metrics = ga_stats_ga_metrics();
  $timeframes = ga_stats_ga_timeframes();
  $data = array();
  foreach ($metrics as $metric => $title) {
    foreach ($timeframes as $key => $time) {
      $filter = isset($time['filter']) ? $time['filter'] : NULL;
      $new_data = ga_stats_get_data($metric, time() - $time['secsToSub'], time(), $key, $filter);
      $data = array_merge($data, $new_data);
    }
  }

  db_query('DELETE FROM {ga_stats_count}');
  foreach ($data as $obj) {
    ga_stats_write_count($obj);
  }
  drupal_set_message(t('Counts Successfully Updated'));
  watchdog('ga_stats', 'Updated statistics for !count records.', array('!count' => count($data)));

  return ga_stats_schedule_update();
}

/**
 * Write the data associated with a specific page to the database.
 *
 * @param object $count
 */
function ga_stats_write_count($count) {
  drupal_write_record('ga_stats_count', $count);
}

/**
 * Determine if the module is properly configured for use.
 *
 * The current logic is a placeholder for something more sophisticated.
 *
 * @return bool
 */
function ga_stats_is_ready() {
  return variable_get('ga_stats_email', FALSE) && variable_get('ga_stats_password', FALSE);
}
