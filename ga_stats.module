<?php
define('GA_ABBR', 'ga');

/**
 * Implements of hook_menu().
 */
function ga_stats_menu() {
  $items = array();

  $items['admin/config/services/ga_stats'] = array(
    'title' => 'Google Analytics Statistics',
    'description' => 'Configuration for Google Analytics Statistics',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ga_stats_admin_settings'),
    'access arguments' => array('administer site config'),
    'file' => 'ga_stats.admin.inc',
  );

  return $items;
}

/**
 * Implements of hook_views_api()
 */
function ga_stats_views_api() {
  return array(
    'api' => 2,
  );
}

/**
 * Implements of hook_cron().
 */
function ga_stats_cron() {
  if (ga_stats_needs_update()) {
    ga_stats_update_counts();
  }
}

/**
 * Determine if a scheduled statistics update is needed.
 *
 * @return bool
 */
function ga_stats_needs_update() {
  $last = variable_get('ga_stats_last_update', NULL);
  if (isset($last) && $last >= $_SERVER['REQUEST_TIME']) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Set the soonest statistics should be auto-updated.
 *
 * @return int
 */
function ga_stats_schedule_update() {
  $timeframe = variable_get('ga_stats_enabled_timeframes', array('today' => TRUE, 'month' => TRUE));

  // Save the data for 10 or 30 minutes (based on whether hourly data is enabled)
  // @todo clarify why this seems arbitrary.
  if (array_key_exists('hour', $timeframe)) {
    $expiration = 60 * 10;
  }
  else {
    $expiration = 60 * 30;
  }
  $expiration += $_SERVER['REQUEST_TIME'];
  variable_set('ga_stats_last_update', $expiration);

  return $expiration;
}

/**
 * Refresh local cache of GA data.
 */
function ga_stats_update_counts() {
  require_once('includes/ga.inc');
  _ga_stats_update_counts();
}

/**
 * Determine if the module is properly configured for use.
 *
 * The current logic is a placeholder for something more sophisticated.
 *
 * @return bool
 */
function ga_stats_is_ready() {
  return variable_get('ga_stats_email', FALSE) && variable_get('ga_stats_password', FALSE);
}
